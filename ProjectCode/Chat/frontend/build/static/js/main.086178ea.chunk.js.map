{"version":3,"sources":["Context/ChatProvider.js","components/Authentication/Login.js","components/Authentication/Signup.js","Pages/Homepage.js","config/ChatLogics.js","components/miscellaneous/ProfileModal.js","components/ScrollableChat.js","components/userAvatar/UserBadgeItem.js","components/userAvatar/UserListItem.js","components/miscellaneous/UpdateGroupChatModal.js","components/SingleChat.js","components/Chatbox.js","components/ChatLoading.js","components/miscellaneous/GroupChatModal.js","components/MyChats.js","components/miscellaneous/SideDrawer.js","Pages/Chatpage.js","App.js","reportWebVitals.js","index.js"],"names":["ChatContext","createContext","ChatState","useContext","ChatProvider","_ref","children","selectedChat","setSelectedChat","useState","user","setUser","notification","setNotification","chats","setChats","history","useHistory","useEffect","userInfo","JSON","parse","localStorage","getItem","push","_jsx","Provider","value","Login","show","setShow","toast","useToast","email","setEmail","password","setPassword","loading","setLoading","_jsxs","VStack","spacing","FormControl","id","isRequired","FormLabel","Input","type","placeholder","onChange","e","target","InputGroup","size","InputRightElement","width","Button","h","onClick","handleClick","style","color","colorScheme","marginTop","async","title","status","duration","isClosable","position","config","headers","data","axios","post","setItem","stringify","window","location","href","error","description","response","message","isLoading","variant","transition","_hover","transform","Signup","name","setName","confirmpassword","setConfirmpassword","pic","setPic","picLoading","setPicLoading","isTeacher","setIsTeacher","subjects","setSubjects","display","alignItems","mr","Checkbox","isChecked","join","split","p","accept","pics","undefined","console","log","FormData","append","fetch","method","body","then","res","json","url","toString","catch","err","postDetails","files","_error$response","_error$response$data","Homepage","Container","maxW","centerContent","Box","d","justifyContent","bg","w","m","borderRadius","Text","fontSize","fontFamily","Tabs","isFitted","TabList","mb","Tab","TabPanels","TabPanel","src","isSameSenderMargin","messages","i","userId","length","sender","_id","isSameSender","isLastMessage","isSameUser","getSender","loggedUser","users","_users$","ProfileModal","isOpen","onOpen","onClose","useDisclosure","_Fragment","IconButton","base","icon","ViewIcon","Modal","isCentered","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","flexDir","Image","boxSize","alt","md","ModalFooter","ScrollableChat","ScrollableFeed","map","Tooltip","label","placement","hasArrow","Avatar","mt","cursor","backgroundColor","concat","marginLeft","padding","maxWidth","content","UserBadgeItem","handleFunction","admin","Badge","px","py","CloseIcon","pl","UserListItem","background","UpdateGroupChatModal","fetchMessages","fetchAgain","setFetchAgain","groupChatName","setGroupChatName","search","setSearch","searchResult","setSearchResult","renameloading","setRenameLoading","handleAddUser","find","u","user1","groupAdmin","Authorization","token","put","chatId","handleRemove","chatName","flexWrap","pb","ml","query","get","handleSearch","Spinner","socket","selectedChatCompare","SingleChat","setMessages","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","istyping","setIsTyping","defaultOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","emit","io","on","newMessageRecieved","chat","includes","ArrowBackIcon","isGroupChat","toUpperCase","overflowY","alignSelf","margin","className","onKeyDown","event","key","Lottie","options","marginBottom","lastTypingTime","Date","getTime","setTimeout","getSenderFull","Chatbox","borderWidth","ChatLoading","Stack","Skeleton","height","GroupChatModal","selectedUsers","setSelectedUsers","handleDelete","delUser","filter","sel","slice","handleGroup","userToAdd","MyChats","setLoggedUser","fetchChats","lg","rightIcon","AddIcon","latestMessage","substring","SideDrawer","loadingChat","setLoadingChat","accessChat","c","Menu","MenuButton","NotificationBadge","count","effect","Effect","SCALE","BellIcon","MenuList","notif","MenuItem","n","as","ChevronDownIcon","MenuDivider","Drawer","DrawerOverlay","DrawerContent","DrawerHeader","borderBottomWidth","DrawerBody","Chatpage","App","Route","path","component","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","ChakraProvider","BrowserRouter","document","getElementById"],"mappings":"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","file":"static/js/main.086178ea.chunk.js","sourcesContent":["import React, { createContext, useContext, useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst ChatContext = createContext();\r\n\r\nconst ChatProvider = ({ children }) => {\r\n  const [selectedChat, setSelectedChat] = useState();\r\n  const [user, setUser] = useState();\r\n  const [notification, setNotification] = useState([]);\r\n  const [chats, setChats] = useState();\r\n\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n    setUser(userInfo);\r\n\r\n    if (!userInfo) history.push(\"/\");\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [history]);\r\n\r\n  return (\r\n    <ChatContext.Provider\r\n      value={{\r\n        selectedChat,\r\n        setSelectedChat,\r\n        user,\r\n        setUser,\r\n        notification,\r\n        setNotification,\r\n        chats,\r\n        setChats,\r\n      }}\r\n    >\r\n      {children}\r\n    </ChatContext.Provider>\r\n  );\r\n};\r\n\r\nexport const ChatState = () => {\r\n  return useContext(ChatContext);\r\n};\r\n\r\nexport default ChatProvider;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\r\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\r\nimport { VStack } from \"@chakra-ui/layout\";\r\nimport { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useToast } from \"@chakra-ui/react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\n\r\nconst Login = () => {\r\n  const [show, setShow] = useState(false);\r\n  const handleClick = () => setShow(!show);\r\n  const toast = useToast();\r\n  const [email, setEmail] = useState();\r\n  const [password, setPassword] = useState();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const history = useHistory();\r\n  const { setUser } = ChatState();\r\n\r\n  const submitHandler = async () => {\r\n    setLoading(true);\r\n    if (!email || !password) {\r\n      toast({\r\n        title: \"Please Fill all the Feilds\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.post(\r\n        \"https://eduverse-chat-backend.onrender.com/api/user/login\",\r\n        { email, password },\r\n        config\r\n      );\r\n\r\n      toast({\r\n        title: \"Login Successful\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setUser(data);\r\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n      setLoading(false);\r\n      window.location.href = 'https://eduverse-frontend.onrender.com?x=0&y=0&z=0';\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <VStack spacing=\"10px\">\r\n      <FormControl id=\"email\" isRequired>\r\n        <FormLabel>Email Address</FormLabel>\r\n        <Input\r\n          value={email}\r\n          type=\"email\"\r\n          placeholder=\"Enter Your Email Address\"\r\n          onChange={(e) => setEmail(e.target.value)}\r\n        />\r\n      </FormControl>\r\n      <FormControl id=\"password\" isRequired>\r\n        <FormLabel>Password</FormLabel>\r\n        <InputGroup size=\"md\">\r\n          <Input\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n            type={show ? \"text\" : \"password\"}\r\n            placeholder=\"Enter password\"\r\n          />\r\n          <InputRightElement width=\"4.5rem\">\r\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick} style={{ color: \"black\" }}>\r\n              {show ? \"Hide\" : \"Show\"}\r\n            </Button>\r\n          </InputRightElement>\r\n        </InputGroup>\r\n      </FormControl>\r\n      <Button\r\n        colorScheme=\"blue\"\r\n        width=\"100%\"\r\n        style={{ marginTop: 15 }}\r\n        onClick={submitHandler}\r\n        isLoading={loading}\r\n      >\r\n        Login\r\n      </Button>\r\n      <Button\r\n        variant=\"solid\"\r\n        colorScheme=\"#290964\"\r\n        width=\"100%\"\r\n        transition=\"transform 0.1s\"\r\n        _hover={{ transform: \"scale(1.005)\" }}\r\n        onClick={() => {\r\n          setEmail(\"guest@example.com\");\r\n          setPassword(\"123456\");\r\n        }}\r\n      >\r\n        Get Guest User Credentials\r\n      </Button>\r\n    </VStack>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  Button,\r\n  Checkbox,\r\n  FormControl,\r\n  FormLabel,\r\n  Input,\r\n  InputGroup,\r\n  InputRightElement,\r\n  VStack,\r\n} from \"@chakra-ui/react\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport axios from \"axios\";\r\n\r\nconst Signup = () => {\r\n  const [show, setShow] = useState(false);\r\n  const [name, setName] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [confirmpassword, setConfirmpassword] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [pic, setPic] = useState(\"\");\r\n  const [picLoading, setPicLoading] = useState(false);\r\n  const [isTeacher, setIsTeacher] = useState(false);\r\n  const [subjects, setSubjects] = useState([]);\r\n\r\n  const toast = useToast();\r\n\r\n  const handleClick = () => setShow(!show);\r\n\r\n  const submitHandler = async () => {\r\n    setPicLoading(true);\r\n    if (!name || !email || !password || !confirmpassword) {\r\n      toast({\r\n        title: \"Please Fill all the Fields\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setPicLoading(false);\r\n      return;\r\n    }\r\n    if (password !== confirmpassword) {\r\n      toast({\r\n        title: \"Passwords Do Not Match\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setPicLoading(false);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const { data } = await axios.post(\"https://eduverse-chat-backend.onrender.com/api/user\", {\r\n        name,\r\n        email,\r\n        password,\r\n        pic,\r\n        isTeacher,\r\n        subjects,\r\n      });\r\n\r\n      // Handle successful registration here, e.g., show a success toast message\r\n      console.log(data);\r\n      toast({\r\n        title: \"Registration Successful\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n\r\n      // Reset form fields and loading state after successful registration\r\n      setName(\"\");\r\n      setEmail(\"\");\r\n      setPassword(\"\");\r\n      setConfirmpassword(\"\");\r\n      setPic(\"\");\r\n      setIsTeacher(false);\r\n      setSubjects([]);\r\n\r\n      setPicLoading(false);\r\n    } catch (error) {\r\n      // Handle registration error here, e.g., show an error toast message\r\n      console.error(\"Registration error:\", error);\r\n      toast({\r\n        title: \"Error Occurred!\",\r\n        description: error.response?.data?.message || \"Something went wrong\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n\r\n      setPicLoading(false);\r\n    }\r\n  };\r\n  const postDetails = (pics) => {\r\n    setPicLoading(true);\r\n    if (pics === undefined) {\r\n      toast({\r\n        title: \"Please Select an Image!\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n    console.log(pics);\r\n    if (pics.type === \"image/jpeg\" || pics.type === \"image/png\") {\r\n      const data = new FormData();\r\n      data.append(\"file\", pics);\r\n      data.append(\"upload_preset\", \"chat-app\");\r\n      data.append(\"cloud_name\", \"piyushproj\");\r\n      fetch(\"https://api.cloudinary.com/v1_1/piyushproj/image/upload\", {\r\n        method: \"post\",\r\n        body: data,\r\n      })\r\n        .then((res) => res.json())\r\n        .then((data) => {\r\n          setPic(data.url.toString());\r\n          console.log(data.url.toString());\r\n          setPicLoading(false);\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n          setPicLoading(false);\r\n        });\r\n    } else {\r\n      toast({\r\n        title: \"Please Select an Image!\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setPicLoading(false);\r\n      return;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <VStack spacing=\"5\">\r\n      <FormControl id=\"first-name\" isRequired>\r\n        <FormLabel>Name</FormLabel>\r\n        <Input\r\n          placeholder=\"Enter Your Name\"\r\n          value={name}\r\n          onChange={(e) => setName(e.target.value)}\r\n        />\r\n      </FormControl>\r\n      <FormControl id=\"email\" isRequired>\r\n        <FormLabel>Email Address</FormLabel>\r\n        <Input\r\n          type=\"email\"\r\n          placeholder=\"Enter Your Email Address\"\r\n          value={email}\r\n          onChange={(e) => setEmail(e.target.value)}\r\n        />\r\n      </FormControl>\r\n      <FormControl id=\"password\" isRequired>\r\n        <FormLabel>Password</FormLabel>\r\n        <InputGroup size=\"md\">\r\n          <Input\r\n            type={show ? \"text\" : \"password\"}\r\n            placeholder=\"Enter Password\"\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n          />\r\n          <InputRightElement width=\"4.5rem\">\r\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick} style={{ color: \"black\" }}>\r\n              {show ? \"Hide\" : \"Show\"}\r\n            </Button>\r\n          </InputRightElement>\r\n        </InputGroup>\r\n      </FormControl>\r\n      <FormControl id=\"confirm-password\" isRequired>\r\n        <FormLabel>Confirm Password</FormLabel>\r\n        <InputGroup size=\"md\">\r\n          <Input\r\n            type={show ? \"text\" : \"password\"}\r\n            placeholder=\"Confirm Password\"\r\n            value={confirmpassword}\r\n            onChange={(e) => setConfirmpassword(e.target.value)}\r\n          />\r\n        </InputGroup>\r\n      </FormControl>\r\n      {/* <FormControl id=\"is-teacher\">\r\n        <FormLabel>Are you a Teacher?</FormLabel>\r\n        <Checkbox\r\n          isChecked={isTeacher}\r\n          onChange={() => setIsTeacher(!isTeacher)}\r\n        />\r\n      </FormControl> */}\r\n      <FormControl id=\"is-teacher\" display=\"flex\" alignItems=\"center\">\r\n        <FormLabel mr={2}>Are you a Teacher?</FormLabel>\r\n        <Checkbox\r\n          isChecked={isTeacher}\r\n          onChange={() => setIsTeacher(!isTeacher)}\r\n        />\r\n      </FormControl>\r\n\r\n      {isTeacher && (\r\n        <FormControl id=\"subjects\">\r\n          <FormLabel>Subjects</FormLabel>\r\n          <Input\r\n            placeholder=\"Enter Subjects (comma-separated)\"\r\n            value={subjects.join(\",\")}\r\n            onChange={(e) => setSubjects(e.target.value.split(\",\"))}\r\n          />\r\n        </FormControl>\r\n      )}\r\n      <FormControl id=\"pic\">\r\n        <FormLabel>Upload your Picture</FormLabel>\r\n        <Input\r\n          type=\"file\"\r\n          p={1.5}\r\n          accept=\"image/*\"\r\n          onChange={(e) => postDetails(e.target.files[0])}\r\n        />\r\n      </FormControl>\r\n      <Button\r\n        colorScheme=\"blue\"\r\n        width=\"100%\"\r\n        onClick={submitHandler}\r\n        isLoading={picLoading}\r\n      >\r\n        Sign Up\r\n      </Button>\r\n    </VStack>\r\n  );\r\n};\r\n\r\nexport default Signup;\r\n\r\n\r\n\r\n","import {\r\n  Box,\r\n  Container,\r\n  Tab,\r\n  TabList,\r\n  TabPanel,\r\n  TabPanels,\r\n  Tabs,\r\n  Text,\r\n} from \"@chakra-ui/react\";\r\nimport { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\nimport Login from \"../components/Authentication/Login\";\r\nimport Signup from \"../components/Authentication/Signup\";\r\n\r\nfunction Homepage() {\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const user = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n\r\n    if (user) history.push(\"/\");\r\n  }, [history]);\r\n\r\n  return (\r\n    <Container maxW=\"xl\" centerContent>\r\n      \r\n      <Box\r\n        d=\"flex\"\r\n        justifyContent=\"center\"\r\n        p={4}\r\n        // bg=\"white\"\r\n        bg=\"rgba(0,0,0,.5)\"\r\n        w=\"100%\"\r\n        m=\"100px 0 0 0\"\r\n        borderRadius=\"lg\"\r\n      // borderWidth=\"1px\"\r\n      >\r\n        <Text fontSize=\"5xl\" fontFamily=\"Chatterbox Beige\" style={{ color: \"white\" }} >\r\n          Edu Verse\r\n        </Text>\r\n      </Box>\r\n      <Box bg=\"rgba(0,0,0,.5)\" w=\"100%\" p={4} borderRadius=\"lg\" style={{ color: \"white\" }} >\r\n        <Tabs isFitted variant=\"soft-rounded\">\r\n          <TabList mb=\"1em\">\r\n            <Tab>Login</Tab>\r\n            <Tab>Sign Up</Tab>\r\n          </TabList>\r\n          <TabPanels>\r\n            <TabPanel>\r\n              <Login />\r\n            </TabPanel>\r\n            <TabPanel>\r\n              <Signup />\r\n            </TabPanel>\r\n          </TabPanels>\r\n        </Tabs>\r\n      </Box>\r\n      <script src=\"//code.tidio.co/njgj8c8twyghns3v3zxydyu9udu1os1e.js\" async></script>\r\n      {/* <script type='module' src='https://interfaces.zapier.com/assets/web-components/zapier-interfaces/zapier-interfaces.esm.js'></script> */}\r\n    </Container>\r\n    // <script type='module' src='https://interfaces.zapier.com/assets/web-components/zapier-interfaces/zapier-interfaces.esm.js'></script>\r\n    // <zapier-interfaces-page-embed page-id='clohjq93x002ijs0qy4u26pwz' no-background='false'  style='max-width: 900px; height: 500px;'></zapier-interfaces-page-embed>\r\n  );\r\n}\r\n\r\nexport default Homepage;\r\n","export const isSameSenderMargin = (messages, m, i, userId) => {\r\n  // console.log(i === messages.length - 1);\r\n\r\n  if (\r\n    i < messages.length - 1 &&\r\n    messages[i + 1].sender._id === m.sender._id &&\r\n    messages[i].sender._id !== userId\r\n  )\r\n    return 33;\r\n  else if (\r\n    (i < messages.length - 1 &&\r\n      messages[i + 1].sender._id !== m.sender._id &&\r\n      messages[i].sender._id !== userId) ||\r\n    (i === messages.length - 1 && messages[i].sender._id !== userId)\r\n  )\r\n    return 0;\r\n  else return \"auto\";\r\n};\r\n\r\nexport const isSameSender = (messages, m, i, userId) => {\r\n  return (\r\n    i < messages.length - 1 &&\r\n    (messages[i + 1].sender._id !== m.sender._id ||\r\n      messages[i + 1].sender._id === undefined) &&\r\n    messages[i].sender._id !== userId\r\n  );\r\n};\r\n\r\nexport const isLastMessage = (messages, i, userId) => {\r\n  return (\r\n    i === messages.length - 1 &&\r\n    messages[messages.length - 1].sender._id !== userId &&\r\n    messages[messages.length - 1].sender._id\r\n  );\r\n};\r\n\r\nexport const isSameUser = (messages, m, i) => {\r\n  return i > 0 && messages[i - 1].sender._id === m.sender._id;\r\n};\r\n\r\nexport const getSender = (loggedUser, users) => {\r\n  return users[0]?._id === loggedUser?._id ? users[1].name : users[0].name;\r\n};\r\n\r\nexport const getSenderFull = (loggedUser, users) => {\r\n  return users[0]._id === loggedUser._id ? users[1] : users[0];\r\n};\r\n","import { ViewIcon } from \"@chakra-ui/icons\";\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  IconButton,\r\n  Text,\r\n  Image,\r\n} from \"@chakra-ui/react\";\r\n\r\nconst ProfileModal = ({ user, children }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n\r\n  return (\r\n    <>\r\n      {children ? (\r\n        <span onClick={onOpen}>{children}</span>\r\n      ) : (\r\n        <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\r\n      )}\r\n      <Modal size=\"lg\" onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent h=\"410px\">\r\n          <ModalHeader\r\n            fontSize=\"40px\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            {user.name}\r\n          </ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody\r\n            d=\"flex\"\r\n            flexDir=\"column\"\r\n            alignItems=\"center\"\r\n            justifyContent=\"space-between\"\r\n          >\r\n            <Image\r\n              borderRadius=\"full\"\r\n              boxSize=\"150px\"\r\n              src={user.pic}\r\n              alt={user.name}\r\n            />\r\n            <Text\r\n              fontSize={{ base: \"28px\", md: \"30px\" }}\r\n              fontFamily=\"Work sans\"\r\n            >\r\n              Email: {user.email}\r\n            </Text>\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={onClose}>Close</Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProfileModal;\r\n","import { Avatar } from \"@chakra-ui/avatar\";\r\nimport { Tooltip } from \"@chakra-ui/tooltip\";\r\nimport ScrollableFeed from \"react-scrollable-feed\";\r\nimport {\r\n  isLastMessage,\r\n  isSameSender,\r\n  isSameSenderMargin,\r\n  isSameUser,\r\n} from \"../config/ChatLogics\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst ScrollableChat = ({ messages }) => {\r\n  const { user } = ChatState();\r\n\r\n  return (\r\n    <ScrollableFeed>\r\n      {messages &&\r\n        messages.map((m, i) => (\r\n          <div style={{ display: \"flex\" }} key={m._id}>\r\n            {(isSameSender(messages, m, i, user._id) ||\r\n              isLastMessage(messages, i, user._id)) && (\r\n              <Tooltip label={m.sender.name} placement=\"bottom-start\" hasArrow>\r\n                <Avatar\r\n                  mt=\"7px\"\r\n                  mr={1}\r\n                  size=\"sm\"\r\n                  cursor=\"pointer\"\r\n                  name={m.sender.name}\r\n                  src={m.sender.pic}\r\n                />\r\n              </Tooltip>\r\n            )}\r\n            <span\r\n              style={{\r\n                backgroundColor: `${\r\n                  m.sender._id === user._id ? \"#BEE3F8\" : \"#B9F5D0\"\r\n                }`,\r\n                marginLeft: isSameSenderMargin(messages, m, i, user._id),\r\n                marginTop: isSameUser(messages, m, i, user._id) ? 3 : 10,\r\n                borderRadius: \"20px\",\r\n                padding: \"5px 15px\",\r\n                maxWidth: \"75%\",\r\n              }}\r\n            >\r\n              {m.content}\r\n            </span>\r\n          </div>\r\n        ))}\r\n    </ScrollableFeed>\r\n  );\r\n};\r\n\r\nexport default ScrollableChat;\r\n","import { CloseIcon } from \"@chakra-ui/icons\";\r\nimport { Badge } from \"@chakra-ui/layout\";\r\n\r\nconst UserBadgeItem = ({ user, handleFunction, admin }) => {\r\n  return (\r\n    <Badge\r\n      px={2}\r\n      py={1}\r\n      borderRadius=\"lg\"\r\n      m={1}\r\n      mb={2}\r\n      variant=\"solid\"\r\n      fontSize={12}\r\n      colorScheme=\"purple\"\r\n      cursor=\"pointer\"\r\n      onClick={handleFunction}\r\n    >\r\n      {user.name}\r\n      {admin === user._id && <span> (Admin)</span>}\r\n      <CloseIcon pl={1} />\r\n    </Badge>\r\n  );\r\n};\r\n\r\nexport default UserBadgeItem;\r\n","import { Avatar } from \"@chakra-ui/avatar\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\n\r\nconst UserListItem = ({ user, handleFunction }) => {\r\n  return (\r\n    <Box\r\n      onClick={handleFunction}\r\n      cursor=\"pointer\"\r\n      bg=\"#E8E8E8\"\r\n      _hover={{\r\n        background: \"#38B2AC\",\r\n        color: \"white\",\r\n      }}\r\n      w=\"100%\"\r\n      d=\"flex\"\r\n      alignItems=\"center\"\r\n      color=\"black\"\r\n      px={3}\r\n      py={2}\r\n      mb={2}\r\n      borderRadius=\"lg\"\r\n    >\r\n      <Avatar\r\n        mr={2}\r\n        size=\"sm\"\r\n        cursor=\"pointer\"\r\n        name={user.name}\r\n        src={user.pic}\r\n      />\r\n      <Box>\r\n        <Text>{user.name}</Text>\r\n        <Text fontSize=\"xs\">\r\n          <b>Email : </b>\r\n          {user.email}\r\n        </Text>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\n\r\nexport default UserListItem;\r\n","import { ViewIcon } from \"@chakra-ui/icons\";\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  FormControl,\r\n  Input,\r\n  useToast,\r\n  Box,\r\n  IconButton,\r\n  Spinner,\r\n} from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\n\r\nconst UpdateGroupChatModal = ({ fetchMessages, fetchAgain, setFetchAgain }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [groupChatName, setGroupChatName] = useState();\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [renameloading, setRenameLoading] = useState(false);\r\n  const toast = useToast();\r\n\r\n  const { selectedChat, setSelectedChat, user } = ChatState();\r\n\r\n  const handleSearch = async (query) => {\r\n    setSearch(query);\r\n    if (!query) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.get(`https://eduverse-chat-backend.onrender.com/api/user?search=${search}`, config);\r\n      console.log(data);\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleRename = async () => {\r\n    if (!groupChatName) return;\r\n\r\n    try {\r\n      setRenameLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        `https://eduverse-chat-backend.onrender.com/api/chat/rename`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          chatName: groupChatName,\r\n        },\r\n        config\r\n      );\r\n\r\n      console.log(data._id);\r\n      // setSelectedChat(\"\");\r\n      setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      setRenameLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setRenameLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n  const handleAddUser = async (user1) => {\r\n    if (selectedChat.users.find((u) => u._id === user1._id)) {\r\n      toast({\r\n        title: \"User Already in group!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (selectedChat.groupAdmin._id !== user._id) {\r\n      toast({\r\n        title: \"Only admins can add someone!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        `https://eduverse-chat-backend.onrender.com/api/chat/groupadd`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          userId: user1._id,\r\n        },\r\n        config\r\n      );\r\n\r\n      setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      setLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n  const handleRemove = async (user1) => {\r\n    if (selectedChat.groupAdmin._id !== user._id && user1._id !== user._id) {\r\n      toast({\r\n        title: \"Only admins can remove someone!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        `https://eduverse-chat-backend.onrender.com/api/chat/groupremove`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          userId: user1._id,\r\n        },\r\n        config\r\n      );\r\n\r\n      user1._id === user._id ? setSelectedChat() : setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      fetchMessages();\r\n      setLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\r\n\r\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader\r\n            fontSize=\"35px\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            {selectedChat.chatName}\r\n          </ModalHeader>\r\n\r\n          <ModalCloseButton />\r\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\r\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\" pb={3}>\r\n              {selectedChat.users.map((u) => (\r\n                <UserBadgeItem\r\n                  key={u._id}\r\n                  user={u}\r\n                  admin={selectedChat.groupAdmin}\r\n                  handleFunction={() => handleRemove(u)}\r\n                />\r\n              ))}\r\n            </Box>\r\n            <FormControl d=\"flex\">\r\n              <Input\r\n                placeholder=\"Chat Name\"\r\n                mb={3}\r\n                value={groupChatName}\r\n                onChange={(e) => setGroupChatName(e.target.value)}\r\n              />\r\n              <Button\r\n                variant=\"solid\"\r\n                colorScheme=\"teal\"\r\n                ml={1}\r\n                isLoading={renameloading}\r\n                onClick={handleRename}\r\n              >\r\n                Update\r\n              </Button>\r\n            </FormControl>\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Add User to group\"\r\n                mb={1}\r\n                onChange={(e) => handleSearch(e.target.value)}\r\n              />\r\n            </FormControl>\r\n\r\n            {loading ? (\r\n              <Spinner size=\"lg\" />\r\n            ) : (\r\n              searchResult?.map((user) => (\r\n                <UserListItem\r\n                  key={user._id}\r\n                  user={user}\r\n                  handleFunction={() => handleAddUser(user)}\r\n                />\r\n              ))\r\n            )}\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={() => handleRemove(user)} colorScheme=\"red\">\r\n              Leave Group\r\n            </Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UpdateGroupChatModal;\r\n","import { FormControl } from \"@chakra-ui/form-control\";\r\nimport { Input } from \"@chakra-ui/input\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport \"./styles.css\";\r\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\r\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\r\nimport { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\r\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\r\nimport ScrollableChat from \"./ScrollableChat\";\r\nimport Lottie from \"react-lottie\";\r\nimport animationData from \"../animations/typing.json\";\r\n\r\nimport io from \"socket.io-client\";\r\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\nconst ENDPOINT = \"https://eduverse-chat-backend.onrender.com/api\"; // \"https://talk-a-tive.herokuapp.com\"; -> After deployment\r\nvar socket, selectedChatCompare;\r\n\r\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [newMessage, setNewMessage] = useState(\"\");\r\n  const [socketConnected, setSocketConnected] = useState(false);\r\n  const [typing, setTyping] = useState(false);\r\n  const [istyping, setIsTyping] = useState(false);\r\n  const toast = useToast();\r\n\r\n  const defaultOptions = {\r\n    loop: true,\r\n    autoplay: true,\r\n    animationData: animationData,\r\n    rendererSettings: {\r\n      preserveAspectRatio: \"xMidYMid slice\",\r\n    },\r\n  };\r\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\r\n    ChatState();\r\n\r\n  const fetchMessages = async () => {\r\n    if (!selectedChat) return;\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      setLoading(true);\r\n\r\n      const { data } = await axios.get(\r\n        `https://eduverse-chat-backend.onrender.com/api/message/${selectedChat._id}`,\r\n        config\r\n      );\r\n      setMessages(data);\r\n      setLoading(false);\r\n\r\n      socket.emit(\"join chat\", selectedChat._id);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Messages\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const sendMessage = async (event) => {\r\n    if (event.key === \"Enter\" && newMessage) {\r\n      socket.emit(\"stop typing\", selectedChat._id);\r\n      try {\r\n        const config = {\r\n          headers: {\r\n            \"Content-type\": \"application/json\",\r\n            Authorization: `Bearer ${user.token}`,\r\n          },\r\n        };\r\n        setNewMessage(\"\");\r\n        const { data } = await axios.post(\r\n          \"https://eduverse-chat-backend.onrender.com/api/message\",\r\n          {\r\n            content: newMessage,\r\n            chatId: selectedChat,\r\n          },\r\n          config\r\n        );\r\n        socket.emit(\"new message\", data);\r\n        setMessages([...messages, data]);\r\n      } catch (error) {\r\n        toast({\r\n          title: \"Error Occured!\",\r\n          description: \"Failed to send the Message\",\r\n          status: \"error\",\r\n          duration: 5000,\r\n          isClosable: true,\r\n          position: \"bottom\",\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    socket = io(ENDPOINT);\r\n    socket.emit(\"setup\", user);\r\n    socket.on(\"connected\", () => setSocketConnected(true));\r\n    socket.on(\"typing\", () => setIsTyping(true));\r\n    socket.on(\"stop typing\", () => setIsTyping(false));\r\n\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchMessages();\r\n\r\n    selectedChatCompare = selectedChat;\r\n    // eslint-disable-next-line\r\n  }, [selectedChat]);\r\n\r\n  useEffect(() => {\r\n    socket.on(\"message recieved\", (newMessageRecieved) => {\r\n      if (\r\n        !selectedChatCompare || // if chat is not selected or doesn't match current chat\r\n        selectedChatCompare._id !== newMessageRecieved.chat._id\r\n      ) {\r\n        if (!notification.includes(newMessageRecieved)) {\r\n          setNotification([newMessageRecieved, ...notification]);\r\n          setFetchAgain(!fetchAgain);\r\n        }\r\n      } else {\r\n        setMessages([...messages, newMessageRecieved]);\r\n      }\r\n    });\r\n  });\r\n\r\n  const typingHandler = (e) => {\r\n    setNewMessage(e.target.value);\r\n\r\n    if (!socketConnected) return;\r\n\r\n    if (!typing) {\r\n      setTyping(true);\r\n      socket.emit(\"typing\", selectedChat._id);\r\n    }\r\n    let lastTypingTime = new Date().getTime();\r\n    var timerLength = 3000;\r\n    setTimeout(() => {\r\n      var timeNow = new Date().getTime();\r\n      var timeDiff = timeNow - lastTypingTime;\r\n      if (timeDiff >= timerLength && typing) {\r\n        socket.emit(\"stop typing\", selectedChat._id);\r\n        setTyping(false);\r\n      }\r\n    }, timerLength);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {selectedChat ? (\r\n        <>\r\n          <Text\r\n            fontSize={{ base: \"28px\", md: \"30px\" }}\r\n            pb={3}\r\n            px={2}\r\n            w=\"100%\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent={{ base: \"space-between\" }}\r\n            alignItems=\"center\"\r\n          >\r\n            <IconButton\r\n              d={{ base: \"flex\", md: \"none\" }}\r\n              icon={<ArrowBackIcon />}\r\n              onClick={() => setSelectedChat(\"\")}\r\n            />\r\n            {messages &&\r\n              (!selectedChat.isGroupChat ? (\r\n                <>\r\n                  {getSender(user, selectedChat.users)}\r\n                  <ProfileModal\r\n                    user={getSenderFull(user, selectedChat.users)}\r\n                  />\r\n                </>\r\n              ) : (\r\n                <>\r\n                  {selectedChat.chatName.toUpperCase()}\r\n                  <UpdateGroupChatModal\r\n                    fetchMessages={fetchMessages}\r\n                    fetchAgain={fetchAgain}\r\n                    setFetchAgain={setFetchAgain}\r\n                  />\r\n                </>\r\n              ))}\r\n          </Text>\r\n          <Box\r\n            d=\"flex\"\r\n            flexDir=\"column\"\r\n            justifyContent=\"flex-end\"\r\n            p={3}\r\n            bg=\"#E8E8E8\"\r\n            w=\"100%\"\r\n            h=\"100%\"\r\n            borderRadius=\"lg\"\r\n            overflowY=\"hidden\"\r\n          >\r\n            {loading ? (\r\n              <Spinner\r\n                size=\"xl\"\r\n                w={20}\r\n                h={20}\r\n                alignSelf=\"center\"\r\n                margin=\"auto\"\r\n              />\r\n            ) : (\r\n              <div className=\"messages\">\r\n                <ScrollableChat messages={messages} />\r\n              </div>\r\n            )}\r\n\r\n            <FormControl\r\n              onKeyDown={sendMessage}\r\n              id=\"first-name\"\r\n              isRequired\r\n              mt={3}\r\n            >\r\n              {istyping ? (\r\n                <div>\r\n                  <Lottie\r\n                    options={defaultOptions}\r\n                    // height={50}\r\n                    width={70}\r\n                    style={{ marginBottom: 15, marginLeft: 0 }}\r\n                  />\r\n                </div>\r\n              ) : (\r\n                <></>\r\n              )}\r\n              <Input\r\n                variant=\"filled\"\r\n                bg=\"#E0E0E0\"\r\n                placeholder=\"Enter a message..\"\r\n                value={newMessage}\r\n                onChange={typingHandler}\r\n              />\r\n            </FormControl>\r\n          </Box>\r\n        </>\r\n      ) : (\r\n        // to get socket.io on same page\r\n        <Box d=\"flex\" alignItems=\"center\" justifyContent=\"center\" h=\"100%\">\r\n          <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\">\r\n            Click on a user to start chatting\r\n          </Text>\r\n        </Box>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SingleChat;\r\n","import { Box } from \"@chakra-ui/layout\";\r\nimport \"./styles.css\";\r\nimport SingleChat from \"./SingleChat\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst Chatbox = ({ fetchAgain, setFetchAgain }) => {\r\n  const { selectedChat } = ChatState();\r\n\r\n  return (\r\n    <Box\r\n      d={{ base: selectedChat ? \"flex\" : \"none\", md: \"flex\" }}\r\n      alignItems=\"center\"\r\n      flexDir=\"column\"\r\n      p={3}\r\n      bg=\"white\"\r\n      w={{ base: \"100%\", md: \"68%\" }}\r\n      borderRadius=\"lg\"\r\n      borderWidth=\"1px\"\r\n    >\r\n      <SingleChat fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Chatbox;\r\n","import { Stack } from \"@chakra-ui/layout\";\r\nimport { Skeleton } from \"@chakra-ui/skeleton\";\r\n\r\nconst ChatLoading = () => {\r\n  return (\r\n    <Stack>\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport default ChatLoading;\r\n","import {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  FormControl,\r\n  Input,\r\n  useToast,\r\n  Box,\r\n} from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\n\r\nconst GroupChatModal = ({ children }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [groupChatName, setGroupChatName] = useState();\r\n  const [selectedUsers, setSelectedUsers] = useState([]);\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const toast = useToast();\r\n\r\n  const { user, chats, setChats } = ChatState();\r\n\r\n  const handleGroup = (userToAdd) => {\r\n    if (selectedUsers.includes(userToAdd)) {\r\n      toast({\r\n        title: \"User already added\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    setSelectedUsers([...selectedUsers, userToAdd]);\r\n  };\r\n\r\n  const handleSearch = async (query) => {\r\n    setSearch(query);\r\n    if (!query) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.get(`https://eduverse-chat-backend.onrender.com/api/user?search=${search}`, config);\r\n      console.log(data);\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleDelete = (delUser) => {\r\n    setSelectedUsers(selectedUsers.filter((sel) => sel._id !== delUser._id));\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    if (!groupChatName || !selectedUsers) {\r\n      toast({\r\n        title: \"Please fill all the feilds\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.post(\r\n        `https://eduverse-chat-backend.onrender.com/api/chat/group`,\r\n        {\r\n          name: groupChatName,\r\n          users: JSON.stringify(selectedUsers.map((u) => u._id)),\r\n        },\r\n        config\r\n      );\r\n      setChats([data, ...chats]);\r\n      onClose();\r\n      toast({\r\n        title: \"New Group Chat Created!\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Failed to Create the Chat!\",\r\n        description: error.response.data,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <span onClick={onOpen}>{children}</span>\r\n\r\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader\r\n            fontSize=\"35px\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            Create Group Chat\r\n          </ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Chat Name\"\r\n                mb={3}\r\n                onChange={(e) => setGroupChatName(e.target.value)}\r\n              />\r\n            </FormControl>\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Add Users eg: John, Piyush, Jane\"\r\n                mb={1}\r\n                onChange={(e) => handleSearch(e.target.value)}\r\n              />\r\n            </FormControl>\r\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\">\r\n              {selectedUsers.map((u) => (\r\n                <UserBadgeItem\r\n                  key={u._id}\r\n                  user={u}\r\n                  handleFunction={() => handleDelete(u)}\r\n                />\r\n              ))}\r\n            </Box>\r\n            {loading ? (\r\n              // <ChatLoading />\r\n              <div>Loading...</div>\r\n            ) : (\r\n              searchResult\r\n                ?.slice(0, 4)\r\n                .map((user) => (\r\n                  <UserListItem\r\n                    key={user._id}\r\n                    user={user}\r\n                    handleFunction={() => handleGroup(user)}\r\n                  />\r\n                ))\r\n            )}\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={handleSubmit} colorScheme=\"blue\">\r\n              Create Chat\r\n            </Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GroupChatModal;\r\n","import { AddIcon } from \"@chakra-ui/icons\";\r\nimport { Box, Stack, Text } from \"@chakra-ui/layout\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport axios from \"axios\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { getSender } from \"../config/ChatLogics\";\r\nimport ChatLoading from \"./ChatLoading\";\r\nimport GroupChatModal from \"./miscellaneous/GroupChatModal\";\r\nimport { Button } from \"@chakra-ui/react\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst MyChats = ({ fetchAgain }) => {\r\n  const [loggedUser, setLoggedUser] = useState();\r\n\r\n  const { selectedChat, setSelectedChat, user, chats, setChats } = ChatState();\r\n\r\n  const toast = useToast();\r\n\r\n  const fetchChats = async () => {\r\n    // console.log(user._id);\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.get(\"https://eduverse-chat-backend.onrender.com/api/chat\", config);\r\n      setChats(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the chats\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setLoggedUser(JSON.parse(localStorage.getItem(\"userInfo\")));\r\n    fetchChats();\r\n    // eslint-disable-next-line\r\n  }, [fetchAgain]);\r\n\r\n  return (\r\n    <Box\r\n      d={{ base: selectedChat ? \"none\" : \"flex\", md: \"flex\" }}\r\n      flexDir=\"column\"\r\n      alignItems=\"center\"\r\n      p={3}\r\n      bg=\"white\"\r\n      w={{ base: \"100%\", md: \"31%\" }}\r\n      borderRadius=\"lg\"\r\n      borderWidth=\"1px\"\r\n    >\r\n      <Box\r\n        pb={3}\r\n        px={3}\r\n        fontSize={{ base: \"28px\", md: \"30px\" }}\r\n        fontFamily=\"Work sans\"\r\n        d=\"flex\"\r\n        w=\"100%\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n      >\r\n        My Chats\r\n        <GroupChatModal>\r\n          <Button\r\n            d=\"flex\"\r\n            fontSize={{ base: \"17px\", md: \"10px\", lg: \"17px\" }}\r\n            rightIcon={<AddIcon />}\r\n          >\r\n            New Group Chat\r\n          </Button>\r\n        </GroupChatModal>\r\n      </Box>\r\n      <Box\r\n        d=\"flex\"\r\n        flexDir=\"column\"\r\n        p={3}\r\n        bg=\"#F8F8F8\"\r\n        w=\"100%\"\r\n        h=\"100%\"\r\n        borderRadius=\"lg\"\r\n        overflowY=\"hidden\"\r\n      >\r\n        {chats ? (\r\n          <Stack overflowY=\"scroll\">\r\n            {chats.map((chat) => (\r\n              <Box\r\n                onClick={() => setSelectedChat(chat)}\r\n                cursor=\"pointer\"\r\n                bg={selectedChat === chat ? \"#38B2AC\" : \"#E8E8E8\"}\r\n                color={selectedChat === chat ? \"white\" : \"black\"}\r\n                px={3}\r\n                py={2}\r\n                borderRadius=\"lg\"\r\n                key={chat._id}\r\n              >\r\n                <Text>\r\n                  {!chat.isGroupChat\r\n                    ? getSender(loggedUser, chat.users)\r\n                    : chat.chatName}\r\n                </Text>\r\n                {chat.latestMessage && (\r\n                  <Text fontSize=\"xs\">\r\n                    <b>{chat.latestMessage.sender.name} : </b>\r\n                    {chat.latestMessage.content.length > 50\r\n                      ? chat.latestMessage.content.substring(0, 51) + \"...\"\r\n                      : chat.latestMessage.content}\r\n                  </Text>\r\n                )}\r\n              </Box>\r\n            ))}\r\n          </Stack>\r\n        ) : (\r\n          <ChatLoading />\r\n        )}\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default MyChats;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { useDisclosure } from \"@chakra-ui/hooks\";\r\nimport { Input } from \"@chakra-ui/input\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport \"./Side.css\"\r\nimport {\r\n  Menu,\r\n  MenuButton,\r\n  MenuDivider,\r\n  MenuItem,\r\n  MenuList,\r\n} from \"@chakra-ui/menu\";\r\nimport {\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerContent,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n} from \"@chakra-ui/modal\";\r\nimport { Tooltip } from \"@chakra-ui/tooltip\";\r\nimport { BellIcon, ChevronDownIcon } from \"@chakra-ui/icons\";\r\nimport { Avatar } from \"@chakra-ui/avatar\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport ChatLoading from \"../ChatLoading\";\r\nimport { Spinner } from \"@chakra-ui/spinner\";\r\nimport ProfileModal from \"./ProfileModal\";\r\nimport NotificationBadge from \"react-notification-badge\";\r\nimport { Effect } from \"react-notification-badge\";\r\nimport { getSender } from \"../../config/ChatLogics\";\r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\n\r\nfunction SideDrawer() {\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [loadingChat, setLoadingChat] = useState(false);\r\n\r\n  const {\r\n    setSelectedChat,\r\n    user,\r\n    notification,\r\n    setNotification,\r\n    chats,\r\n    setChats,\r\n  } = ChatState();\r\n\r\n  const toast = useToast();\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const history = useHistory();\r\n\r\n  const logoutHandler = () => {\r\n    localStorage.removeItem(\"userInfo\");\r\n    history.push(\"/\");\r\n  };\r\n\r\n  const handleSearch = async () => {\r\n    if (!search) {\r\n      toast({\r\n        title: \"Please Enter something in search\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top-left\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.get(`https://eduverse-chat-backend.onrender.com/api/user?search=${search}`, config);\r\n\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const accessChat = async (userId) => {\r\n    console.log(userId);\r\n\r\n    try {\r\n      setLoadingChat(true);\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.post(`https://eduverse-chat-backend.onrender.com/api/chat`, { userId }, config);\r\n\r\n      if (!chats.find((c) => c._id === data._id)) setChats([data, ...chats]);\r\n      setSelectedChat(data);\r\n      setLoadingChat(false);\r\n      onClose();\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error fetching the chat\",\r\n        description: error.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Box\r\n        d=\"flex\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n        bg=\"white\"\r\n        w=\"100%\"\r\n        p=\"5px 10px 5px 10px\"\r\n        borderWidth=\"5px\"\r\n      >\r\n        <Tooltip label=\"Search Users to chat\" hasArrow placement=\"bottom-end\">\r\n          {/* seach button */}\r\n          <Button variant=\"ghost\" onClick={onOpen}>\r\n            <i className=\"fas fa-search\"></i>\r\n            <Text d={{ base: \"none\", md: \"flex\" }} px={4}>\r\n              Search User\r\n            </Text>\r\n          </Button>\r\n        </Tooltip>\r\n        <Text fontSize=\"3xl\" fontFamily=\"Roboto\">\r\n          Edu Chat\r\n        </Text>\r\n        <div>\r\n          <Menu>\r\n            <MenuButton p={1}>\r\n              <NotificationBadge\r\n                count={notification.length}\r\n                effect={Effect.SCALE}\r\n              />\r\n              <BellIcon fontSize=\"2xl\" m={1} />\r\n            </MenuButton>\r\n            <MenuList pl={2}>\r\n              {!notification.length && \"No New Messages\"}\r\n              {notification.map((notif) => (\r\n                <MenuItem\r\n                  key={notif._id}\r\n                  onClick={() => {\r\n                    setSelectedChat(notif.chat);\r\n                    setNotification(notification.filter((n) => n !== notif));\r\n                  }}\r\n                >\r\n                  {notif.chat.isGroupChat\r\n                    ? `New Message in ${notif.chat.chatName}`\r\n                    : `New Message from ${getSender(user, notif.chat.users)}`}\r\n                </MenuItem>\r\n              ))}\r\n            </MenuList>\r\n          </Menu>\r\n          <Menu>\r\n            <MenuButton as={Button} bg=\"white\" rightIcon={<ChevronDownIcon />}>\r\n              <Avatar\r\n                size=\"sm\"\r\n                cursor=\"pointer\"\r\n                name={user.name}\r\n                src={user.pic}\r\n              />\r\n            </MenuButton>\r\n            <MenuList>\r\n              <ProfileModal user={user}>\r\n                <MenuItem>My Profile</MenuItem>{\" \"}\r\n              </ProfileModal>\r\n              <MenuDivider />\r\n\r\n              \r\n              <a className=\"logout\" href=\"https://eduverse-frontend.onrender.com/?x=0&y=0.3&z=-93\">Back to Eduverse</a>\r\n            </MenuList>\r\n          </Menu>\r\n        </div>\r\n      </Box>\r\n\r\n      <Drawer placement=\"left\" onClose={onClose} isOpen={isOpen}>\r\n        <DrawerOverlay />\r\n        <DrawerContent>\r\n          <DrawerHeader borderBottomWidth=\"1px\">Search Users</DrawerHeader>\r\n          <DrawerBody>\r\n            <Box d=\"flex\" pb={2}>\r\n              <Input\r\n                placeholder=\"Search by name or email\"\r\n                mr={2}\r\n                value={search}\r\n                onChange={(e) => setSearch(e.target.value)}\r\n              />\r\n              <Button onClick={handleSearch}>Go</Button>\r\n            </Box>\r\n            {loading ? (\r\n              <ChatLoading />\r\n            ) : (\r\n              searchResult?.map((user) => (\r\n                <UserListItem\r\n                  key={user._id}\r\n                  user={user}\r\n                  handleFunction={() => accessChat(user._id)}\r\n                />\r\n              ))\r\n            )}\r\n            {loadingChat && <Spinner ml=\"auto\" d=\"flex\" />}\r\n          </DrawerBody>\r\n        </DrawerContent>\r\n      </Drawer>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SideDrawer;\r\n","import { Box } from \"@chakra-ui/layout\";\r\nimport { useState } from \"react\";\r\nimport Chatbox from \"../components/Chatbox\";\r\nimport MyChats from \"../components/MyChats\";\r\nimport SideDrawer from \"../components/miscellaneous/SideDrawer\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst Chatpage = () => {\r\n  const [fetchAgain, setFetchAgain] = useState(false);\r\n  const { user } = ChatState();\r\n\r\n  return (\r\n    <div style={{ width: \"100%\" }}>\r\n      {user && <SideDrawer />}\r\n      <Box d=\"flex\" justifyContent=\"space-between\" w=\"100%\" h=\"91.5vh\" p=\"10px\">\r\n        {user && <MyChats fetchAgain={fetchAgain} />}\r\n        {user && (\r\n          <Chatbox fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\r\n        )}\r\n      </Box>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatpage;\r\n","import \"./App.css\";\r\nimport Homepage from \"./Pages/Homepage\";\r\nimport { Route } from \"react-router-dom\";\r\nimport Chatpage from \"./Pages/Chatpage\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      \r\n      <Route path=\"/\" component={Homepage} exact />\r\n      <Route path=\"/chats\" component={Chatpage} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport { ChakraProvider } from \"@chakra-ui/react\";\r\nimport ChatProvider from \"./Context/ChatProvider\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <ChakraProvider>\r\n    <BrowserRouter>\r\n      <ChatProvider>\r\n        <App />\r\n      </ChatProvider>\r\n    </BrowserRouter>\r\n  </ChakraProvider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}